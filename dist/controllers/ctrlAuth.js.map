{"version":3,"sources":["../../src/controllers/ctrlAuth.js"],"names":["signup","req","res","body","email","userName","password","person","User","findOne","toLocaleLowerCase","status","send","error","save","_id","token","notifications","isAuthenticated","err","signin","addressEth","walletEth","address","addressBtc","walletBtc","addressLtc","walletLtc","addressBch","walletBch","logout","user"],"mappings":"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","file":"ctrlAuth.js","sourcesContent":["'use strict';\n\nimport User from '../models/SchemaUser';\nimport {createToken} from '../services/token';\nimport {comparePassword} from '../services/password';\n\nexport const signup = async (req,res)=>{\n    try\n    {\n\n        let {\n            email,\n            userName,\n            password,\n        } = req.body;\n\n        let person = await User.findOne({email:email.toLocaleLowerCase()},{email:true});\n\n        if(person) return res.status(400).send({error:'Correo ya existe.'});    \n \n        person = new User({\n            userName,\n            email,\n            password,\n        })\n\n        await person.save();\n\n        res.status(201).send({\n            _id: person._id,\n            token : createToken(person,360),\n            email : person.email,\n            userName : person.userName,\n            notifications : person.notifications,\n            isAuthenticated : true\n        })\n    }\n    catch(err)\n    {\n        res.status(500).send({error:'Error en el servidor'});\n    }\n}\n\nexport const signin = async(req,res)=>{\n\n    const {\n    \temail,\n    \tpassword\n    } = req.body;\n\n    const person = await User.findOne({\"email\" : email.toLocaleLowerCase()});\n\n    if(!person) return res.status(401).send({error:'Correo invalido'});\n\n    if(!comparePassword(password.toLocaleLowerCase(),person.password)) return res.status(403).send({error:'ContraseÃ±a invalida'});\n\n    res.status(200).send({\n        _id: person._id,\n        token : createToken(person,360),\n        email : person.email,\n        userName : person.userName,\n        notifications : person.notifications,\n        isAuthenticated : true,\n        addressEth : person.walletEth ? person.walletEth.address : null,\n        addressBtc : person.walletBtc ? person.walletBtc.address : null,\n        addressLtc : person.walletLtc ? person.walletLtc.address : null,\n        addressBch : person.walletBch ? person.walletBch.address : null\n    })\n\n}\n\nexport const logout = async(req,res)=>{\n    try\n    {\n        let person = await User.findOne({_id:req.user});\n        if(!person) return res.status(400).send({error:'Usuario no existe'});\n        res.status(204).send();\n    }\n    catch(err)\n    {\n        res.status(500).send({error:'Error en el servidor'});\n    }\n}\n"]}