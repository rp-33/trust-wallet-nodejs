{"version":3,"sources":["../../src/services/walletEth.js"],"names":["WalletEth","web3js","Web3","configuration","infura","provider","ethWallet","wallet","generate","walletEth","getAddressString","getPrivateKeyString","address","Promise","resolve","reject","eth","getBalance","err","balance","status","error","utils","fromWei","privatekey","myAddress","toAddress","amount","addressKey","Buffer","from","substring","getTransactionCount","then","rawTransaction","nonce","toHex","txCount","gasPrice","toWei","gasLimit","to","value","transactioneth","EthereumTx","sign","sendSignedTransaction","serialize","toString","on","hash","console","log","message","block","getBlock","number","blockTransactions","transactions","txHash","tx","getTransaction","toLowerCase"],"mappings":"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","file":"walletEth.js","sourcesContent":["'use strict';\nimport wallet from 'ethereumjs-wallet';\nimport Web3 from 'web3';\nimport EthereumTx from 'ethereumjs-tx';\nimport configuration from '../configuration';\n\nclass WalletEth{\n\n\tconstructor()\n\t{\n\t\tthis.web3js = new Web3(configuration.infura.provider);\n\t}\n\n\tcreate()\n\t{\n\n\t\tlet ethWallet = wallet.generate();\n\n\t\tlet walletEth = {\n\t\t\t'address' : ethWallet.getAddressString(),\n\t\t\t'privateKey' :  ethWallet.getPrivateKeyString()\n\t\t}\n\t\t\n\t\treturn walletEth;\n\t}\n\n\tgetBalance(address)\n\t{\n\t\treturn new Promise( ( resolve , reject ) =>{\n        try\n        {\n            \n            this.web3js.eth.getBalance(address,(err,balance)=>{\n            \tif(err) \n            \t{\n    \t\t\t\treject({\n                \t\tstatus : 400,\n                \t\terror : 'Su direccion no existe'\n            \t\t})\n  \t\t\t\t}\n  \t\t\t\telse\n  \t\t\t\t{\n  \t\t\t\t\tresolve({\n  \t\t\t\t\t\tstatus:200,\n  \t\t\t\t\t\tbalance : this.web3js.utils.fromWei(balance, \"ether\")\n  \t\t\t\t\t})   \n  \t\t\t\t}\n            })\n            \t\n        }\n        catch(err) \n        {\n            reject({\n                status : 500,\n                error : 'ha ocurrido un error'\n            })\n        }\n        })\n\t\t\n\t}\n\n\ttransaction(privatekey,myAddress,toAddress,amount)\n\t{\n\n        return new Promise( ( resolve , reject ) =>{\n        try\n        {\n            var addressKey = Buffer.from(privatekey.substring(2,66), 'hex')\n            this.web3js.eth.getTransactionCount(myAddress).then(txCount=>{\n            \n                var rawTransaction = {\n                    nonce: this.web3js.utils.toHex(txCount),\n                    gasPrice: this.web3js.utils.toHex(this.web3js.utils.toWei(\"2\", \"gwei\")),\n                    gasLimit: this.web3js.utils.toHex(21000),\n                    to: toAddress,\n                    value: this.web3js.utils.toHex(this.web3js.utils.toWei(amount)),\n                }\n\n                //creamos la transaccion\n                var transactioneth = new EthereumTx(rawTransaction);\n                //firmando la transaccion\n                transactioneth.sign(addressKey);\n                //sending transacton via web3js module\n                this.web3js.eth.sendSignedTransaction('0x'+transactioneth.serialize().toString('hex'))\n                .on('transactionHash', hash=>{\n                    resolve({\n                        status:201,\n                        hash : hash\n                    })\n                })\n                .on('error', err=>{\n                    console.log(err)\n                    reject({\n                        status : 500,\n                        message : 'Error en la transferencia'\n                    })\n                }); \n\n            })\n         \n            \n                \n        }\n        catch(err) \n        {\n            reject({\n                status : 500,\n                error : 'ha ocurrido un error'\n            })\n        }\n        })\n\t\t\n\t}\n\n    async getHistorial(address)\n    {\n        console.log('address',address)\n        let block = await this.web3js.eth.getBlock(9930484);\n        let number = block.number;\n        let blockTransactions = block.transactions;\n\n        if (block != null && blockTransactions != null) {\n            let transactions = [];\n            for (let txHash of blockTransactions) {\n                let tx = await this.web3js.eth.getTransaction(txHash);\n                if (address.toLowerCase() == tx.to.toLowerCase() || address.toLowerCase() == tx.from.toLowerCase()) {\n                   console.log(tx);\n                }\n            }\n\n            \n        }\n        \n  \n    }\n\n\n}\n\n\n\nexport default new WalletEth;"]}