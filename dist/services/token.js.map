{"version":3,"sources":["../../src/services/token.js"],"names":["createToken","user","days","payload","sub","_id","iat","unix","exp","add","jwt","encode","config","token","secret","decodeToken","decode","Promise","resolve","reject","status","message","id","err"],"mappings":"AAAA;;;;;;;AAEA;;;;AACA;;;;;;AAEO,IAAMA,oCAAc,SAAdA,WAAc,CAACC,IAAD,EAAMC,IAAN,EAAe;AACtC,QAAIC,UAAU;AACVC,aAAMH,KAAKI,GADD,EACM;AAChBC,aAAM,wBAASC,IAAT,EAFI,EAEa;AACvBC,aAAM,wBAASC,GAAT,CAAaP,IAAb,EAAkB,MAAlB,EAA0BK,IAA1B,EAHI,CAG6B;AAH7B,KAAd;AAKA,WAAOG,oBAAIC,MAAJ,CAAWR,OAAX,EAAmBS,OAAOC,KAAP,CAAaC,MAAhC,CAAP;AACH,CAPM,C,CAOL;;AAEK,IAAMC,oCAAc,SAAdA,WAAc,QAAS;;AAEhC,QAAIC,SAAS,IAAIC,OAAJ,CAAa,UAAEC,OAAF,EAAYC,MAAZ,EAAuB;AAC7C,YAAG;AACC,gBAAMhB,UAAUO,oBAAIM,MAAJ,CAAWH,KAAX,EAAiBD,OAAOC,KAAP,CAAaC,MAA9B,CAAhB;AACA,gBAAGX,QAAQK,GAAR,GAAc,wBAASD,IAAT,EAAjB,EAAkC;AAC1BY,uBAAO;AACHC,4BAAS,GADN;AAEHC,6BAAU;AAFP,iBAAP;AAIP;;AAEDH,oBAAQ;AACJE,wBAAS,GADL;AAEJE,oBAAKnB,QAAQC;AAFT,aAAR;AAIH,SAbD,CAaC,OAAMmB,GAAN,EAAW;AACRJ,mBAAO;AACHC,wBAAS,GADN;AAEHC,yBAAU;AAFP,aAAP;AAIH;AACJ,KApBY,CAAb;;AAsBA,WAAOL,MAAP;AAGH,CA3BM,C,CA2BL","file":"token.js","sourcesContent":["'use strict';\n\nimport jwt from'jwt-simple';\nimport moment from 'moment';\n\nexport const createToken = (user,days) => {\n    let payload = {\n        sub : user._id, // id del usuario\n        iat : moment().unix(), //momento que se ha creado el token\n        exp : moment().add(days,'days').unix() //momento que sera expirado el token\n    };\n    return jwt.encode(payload,config.token.secret)\n};//crea el token del usuario con una fecha de expiracion \n\nexport const decodeToken = token => {\n    \n    let decode = new Promise( ( resolve , reject ) =>{\n        try{\n            const payload = jwt.decode(token,config.token.secret);\n            if(payload.exp < moment().unix()) {\n                    reject({\n                        status : 403,\n                        message : 'El token ha expirado'\n                    });\n            }\n\n            resolve({\n                status : 200,\n                id : payload.sub\n            });\t\t\n        }catch(err) {\n            reject({\n                status : 500,\n                message : 'Token invalido'\n            })\n        }\n    })\n\n    return decode;\n\n    \n};//decodifica el toquen para validar si tiene autorizacion o no\n\n"]}