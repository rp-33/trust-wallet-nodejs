{"version":3,"sources":["../../src/hdwallet/index.js"],"names":["bip39","require","HDkey","hdkey","mnemonicConfig","strength","rng","wordlist","HDWallet","config","password","mnemonic","mnemonicToSeed","newMnemonic","generateMnemonic","console","log","seed","coin_type","account","change","address_index","root","fromMasterSeed","changeNodeDerivationPath","changeNode","derivePath","addrNode","deriveChild","privateKey","getWallet","getPrivateKey","toString","publicKey","getPublicKey","privateExtendedKey","publicExtendedKey","address","getAddress","wallet","generateSeed","then","createAcount"],"mappings":";;;;;;AAAA,IAAMA,QAAQC,QAAQ,OAAR,CAAd;AACA,IAAMC,QAAQD,QAAQ,OAAR,CAAd;;eACkBA,QAAQ,mBAAR,C;IAAVE,K,YAAAA,K;;AAER,IAAMC,iBAAiB;AACnBC,cAAU,GADS;AAEnBC,SAAK,IAFc;AAGnBC,cAAU;AAHS,CAAvB;;IAMMC,Q;AACF;;AAEA,wBAAa;AAAA;;AACT,aAAKC,MAAL,GAAcL,cAAd;AACH;;;;6CAEwC;AAAA,gBAAtBM,QAAsB,uEAAb,EAAa;AAAA,gBAATC,QAAS;;AACrC,gBAAGA,QAAH,EAAY;AACR,uBAAO,MAAMX,MAAMY,cAAN,CAAqBD,QAArB,EAA+BD,QAA/B,CAAb;AACH;AACD,gBAAMG,cAAcb,MAAMc,gBAAN,CAAuB,KAAKL,MAAL,CAAYJ,QAAnC,EAA6C,KAAKI,MAAL,CAAYH,GAAzD,EAA8D,KAAKG,MAAL,CAAYF,QAA1E,CAApB;AACAQ,oBAAQC,GAAR,CAAY,UAAZ,EAAwBH,WAAxB;AACA,mBAAO,MAAMb,MAAMY,cAAN,CAAqBC,WAArB,EAAkCH,QAAlC,CAAb;AACH;;;qCAEYO,I,EAAMC,S,EAAWC,O,EAASC,M,EAAQC,a,EAAc;AACzD,gBAAMC,OAAOnB,MAAMoB,cAAN,CAAqBN,IAArB,CAAb;AACA,gBAAMO,sCAAoCN,SAApC,UAAkDC,OAAlD,UAA8DC,MAApE;AACA,gBAAMK,aAAaH,KAAKI,UAAL,CAAgBF,wBAAhB,CAAnB;AACA,gBAAIG,WAAWF,WAAWG,WAAX,CAAuBP,aAAvB,CAAf;AACA,gBAAMQ,aAAaF,SAASG,SAAT,GAAqBC,aAArB,GAAqCC,QAArC,CAA8C,KAA9C,CAAnB;AACA,gBAAMC,YAAYN,SAASG,SAAT,GAAqBI,YAArB,GAAoCF,QAApC,CAA6C,KAA7C,CAAlB;AACA,gBAAIG,qBAAqBR,SAASQ,kBAAT,GAA8BH,QAA9B,CAAuC,KAAvC,CAAzB;AACA,gBAAII,oBAAoBT,SAASS,iBAAT,GAA6BJ,QAA7B,CAAsC,KAAtC,CAAxB;AACA,gBAAIK,UAAUV,SAASG,SAAT,GAAqBQ,UAArB,GAAkCN,QAAlC,CAA2C,KAA3C,CAAd;AACAjB,oBAAQC,GAAR,CAAY;AACRa,sCADQ;AAERI,oCAFQ;AAGRE,sDAHQ;AAIRC,oDAJQ;AAKRC;AALQ,aAAZ;AAOH;;;;;;AAGL,IAAME,SAAS,IAAI/B,QAAJ,EAAf;AACA,IAAMS,OAAOsB,OAAOC,YAAP,CACT,EADS,EAET,0EAFS,EAGXC,IAHW,CAGN,gBAAQ;AACXF,WAAOG,YAAP,CAAoBzB,IAApB,EAA0B,EAA1B,EAA8B,CAA9B,EAAiC,CAAjC,EAAoC,CAApC;AACH,CALY,CAAb","file":"index.js","sourcesContent":["const bip39 = require(\"bip39\");\nconst HDkey = require(\"hdkey\");\nconst { hdkey } = require('ethereumjs-wallet')\n\nconst mnemonicConfig = {\n    strength: 128, \n    rng: null, \n    wordlist: null\n}\n\nclass HDWallet {\n    // m/purpose'/coin_type'/account'/change/address_index\n\n    constructor(){\n        this.config = mnemonicConfig;\n    }\n\n    async generateSeed(password=\"\", mnemonic){\n        if(mnemonic){\n            return await bip39.mnemonicToSeed(mnemonic, password);\n        }\n        const newMnemonic = bip39.generateMnemonic(this.config.strength, this.config.rng, this.config.wordlist);\n        console.log(\"guardar:\", newMnemonic);\n        return await bip39.mnemonicToSeed(newMnemonic, password);\n    }\n\n    createAcount(seed, coin_type, account, change, address_index){\n        const root = hdkey.fromMasterSeed(seed);\n        const changeNodeDerivationPath = `m/44'/${coin_type}'/${account}'/${change}`;\n        const changeNode = root.derivePath(changeNodeDerivationPath);\n        let addrNode = changeNode.deriveChild(address_index);\n        const privateKey = addrNode.getWallet().getPrivateKey().toString(\"hex\");\n        const publicKey = addrNode.getWallet().getPublicKey().toString(\"hex\");\n        let privateExtendedKey = addrNode.privateExtendedKey().toString(\"hex\");\n        let publicExtendedKey = addrNode.publicExtendedKey().toString(\"hex\");\n        let address = addrNode.getWallet().getAddress().toString(\"hex\");\n        console.log({\n            privateKey,\n            publicKey,\n            privateExtendedKey,\n            publicExtendedKey,\n            address\n        });\n    }\n}\n\nconst wallet = new HDWallet();\nconst seed = wallet.generateSeed(\n    \"\", \n    \"fabric dose rural museum lemon trouble day whip follow cry metal inherit\"\n).then(seed => {\n    wallet.createAcount(seed, 60, 0, 0, 0)\n});\n\n"]}